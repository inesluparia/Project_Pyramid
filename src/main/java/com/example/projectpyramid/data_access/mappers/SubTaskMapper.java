package com.example.projectpyramid.data_access.mappers;

import com.example.projectpyramid.data_access.DBManager;
import com.example.projectpyramid.data_access.Mapper;
import com.example.projectpyramid.domain.entities.SubTask;
import com.example.projectpyramid.domain.entities.Task;
import org.jetbrains.annotations.NotNull;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class SubTaskMapper implements Mapper<SubTask> {

    /**
     * Inserts a subtask into the database.
     *
     * @param subTask The subtask to be inserted into the database.
     * @return The id of the newly inserted subtask, 0 if unable to insert.
     * @throws SQLIntegrityConstraintViolationException (this is very unlikely as id
     * is the only unique key in this table. Ids are autogenerated by the database).
     */
    public int insert(@NotNull SubTask subTask) throws SQLIntegrityConstraintViolationException {
        String query = "INSERT INTO subtasks (task_id, name, description, duration) VALUES (?, ?, ?, ?)";
        Connection connection = DBManager.getConnection();
        int subTaskId = 0;

        try {
            PreparedStatement preparedStatement = connection.prepareStatement(query, Statement.RETURN_GENERATED_KEYS);
            preparedStatement.setInt(1, subTask.getTaskId());
            preparedStatement.setString(2, subTask.getName());
            preparedStatement.setString(3, subTask.getDescription());
            preparedStatement.setInt(3, subTask.getDurationInManHours());
            preparedStatement.executeUpdate();

            ResultSet resultSet = preparedStatement.getGeneratedKeys();

            if (resultSet.next())
                subTaskId = resultSet.getInt(1);

        } catch (SQLException ex) {
            ex.printStackTrace();
        }

        return subTaskId;
    }

    /**
     * Updates a subtask's changes to the database.
     *
     * @param subTask The subtask that has been changed.
     */
    public void update(@NotNull SubTask subTask) {
        String query = "UPDATE subtasks SET task_id = ?, name = ?, description = ?, duration = ? WHERE id = ?";
        Connection connection = DBManager.getConnection();

        try {
            PreparedStatement preparedStatement = connection.prepareStatement(query, Statement.NO_GENERATED_KEYS);
            preparedStatement.setInt(1, subTask.getTaskId());
            preparedStatement.setString(2, subTask.getName());
            preparedStatement.setString(3, subTask.getDescription());
            preparedStatement.setInt(4, subTask.getDurationInManHours());
            preparedStatement.setInt(5, subTask.getId());
            preparedStatement.executeUpdate();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    /**
     * Deletes a subtask from the database.
     *
     * @param subTask The subtask to be deleted from the database.
     */
    public void delete(@NotNull SubTask subTask) {
        String query = "DELETE FROM subtasks WHERE id = ?";
        Connection connection = DBManager.getConnection();

        try {
            PreparedStatement preparedStatement = connection.prepareStatement(query, Statement.NO_GENERATED_KEYS);
            preparedStatement.setInt(1, subTask.getId());
            preparedStatement.executeUpdate();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    /**
     * Finds a subtask from its subtask id.
     *
     * @param subTaskId The id of the subtask to find.
     * @return The found subtask, null if not found.
     */
    public SubTask findById(int subTaskId) {
        String query = "SELECT * FROM subtasks WHERE id = ?";
        Connection connection = DBManager.getConnection();

        try {
            PreparedStatement preparedStatement = connection.prepareStatement(query, Statement.RETURN_GENERATED_KEYS);
            preparedStatement.setInt(1, subTaskId);
            preparedStatement.executeUpdate();

            ResultSet resultSet = preparedStatement.getGeneratedKeys();
            if (resultSet.next()) {
                int taskId = resultSet.getInt("task_id");
                String name = resultSet.getString("name");
                String description = resultSet.getString("description");
                int durationInManHours = resultSet.getInt("duration");

                return new SubTask(subTaskId, taskId, name, description, durationInManHours);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }

        return null;
    }

    /**
     * Finds all subtasks in a specific task.
     *
     * @param taskId The task id of the subtasks to find.
     * @return List of found subtasks, empty if none found.
     */
    public List<SubTask> findAllByTaskId(int taskId) {
        String query = "SELECT id, name, description, duration FROM subtasks WHERE task_id = ?";
        Connection con = DBManager.getConnection();
        ArrayList<SubTask> subTasks = new ArrayList<>();

        try {
            PreparedStatement preparedStatement = con.prepareStatement(query, Statement.RETURN_GENERATED_KEYS);
            preparedStatement.setInt(1, taskId);
            ResultSet resultSet = preparedStatement.executeQuery();

            while (resultSet.next()) {
                int subTaskId = resultSet.getInt("id");
                String name = resultSet.getString("name");
                String description = resultSet.getString("description");
                int durationInManHours = resultSet.getInt("duration");

                subTasks.add(new SubTask(subTaskId, taskId, name, description, durationInManHours));
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }

        return subTasks;
    }

    // <editor-fold desc="Deprecated methods">

    /**
     * @deprecated and replaced by {@link SubTaskMapper#insert(SubTask)}
     */
    public void insertSubTask(SubTask subTask) throws Exception {
        try {
            Connection con = DBManager.getConnection();
            String SQL = "INSERT INTO subtasks (name, task_id, description, duration) VALUES (?, ?, ?, ?)";
            PreparedStatement ps = con.prepareStatement(SQL, Statement.RETURN_GENERATED_KEYS);
            ps.setString(1, subTask.getName());
            ps.setInt(2, subTask.getTaskId());
            ps.setString(3, subTask.getDescription());
            ps.setInt(4, subTask.getDurationInManHours());
            ps.executeUpdate();
        } catch (SQLException ex) {
            throw new Exception(ex.getMessage());
        }
    }

    /**
     * @deprecated and replaced by {@link SubTaskMapper#findAllByTaskId(int)}
     */
    public ArrayList<SubTask> getSubTasks(int taskId ){
        String query = "SELECT id, name, description, duration FROM subtasks WHERE task_id = ?";
        Connection connection = DBManager.getConnection();
        ArrayList<SubTask> subTasks = new ArrayList<>();
        try {
            PreparedStatement preparedStatement = connection.prepareStatement(query, Statement.RETURN_GENERATED_KEYS);
            preparedStatement.setInt(1, taskId );
            ResultSet results = preparedStatement.executeQuery();

            while (results.next()) {
                int id = results.getInt("id");
                String name = results.getString("name");
                int durationInManHours = results.getInt("duration");
                String description = results.getString("description");

                subTasks.add(new SubTask(id, taskId, name, description, durationInManHours));
            }

            return subTasks;

        } catch (SQLException ex) {
            return null;
        }
    }

    /**
     * @deprecated and replaced by {@link SubTaskMapper#findById(int)}
     */
    public SubTask getSubtask(int subTaskId) {

        try {
            String query = "SELECT name, description, duration, task_id FROM subtasks WHERE id = ?";
            Connection connection = DBManager.getConnection();
            PreparedStatement preparedStatement = connection.prepareStatement(query, Statement.RETURN_GENERATED_KEYS);
            preparedStatement.setInt(1, subTaskId);
            ResultSet results = preparedStatement.executeQuery();

            results.next();
            String name = results.getString("name");
            String description = results.getString("description");
            int durationInManHours = results.getInt("duration");
            int taskId = results.getInt("task_id");
            SubTask subTask = new SubTask(subTaskId, taskId, name, description, durationInManHours);
            return subTask;

        } catch (SQLException ex) {
            return null;
        }
    }

    /**
     * @deprecated and replaced by {@link SubTaskMapper#update(SubTask)}
     */
    public void update(String name, String description, int durationInManHours, int id) {
        String query = "UPDATE subtasks SET name = ?, description = ?, duration = ? WHERE id = ?";
        Connection connection = DBManager.getConnection();

        try {
            PreparedStatement ps = connection.prepareStatement(query, Statement.NO_GENERATED_KEYS);
            ps.setString(1, name);
            ps.setString(2, description);
            ps.setInt(3, durationInManHours);
            ps.setInt(4, id);
            ps.executeUpdate();

            //wasSuccessful = ps.executeUpdate() > 0;

        } catch (SQLException ex) {
            System.out.println("An Exception occured:");
            ex.printStackTrace();
        }
    }

    // </editor-fold>
}
